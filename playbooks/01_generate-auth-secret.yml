# playbooks/01_generate-auth-secret.yml
# 🔐 Generar y sellar el Secret de autenticación básica para Longhorn Dashboard
---
- name: 🔐 Generar y sellar el Secret de basic-auth para Longhorn Dashboard
  hosts: localhost
  gather_facts: false
  become: false

  vars_files:
    - ../vars/main.yml  # ← contiene longhorn_auth_user y longhorn_auth_pass

  vars:
    files_dir: "{{ playbook_dir }}/files"
    secret_template: "../templates/secrets/basic-auth-secret.yaml.j2"
    rendered_unsealed_secret_path: "{{ files_dir }}/longhorn-dashboard-secret-unsealed.yaml"
    sealed_secret_path: "{{ files_dir }}/longhorn-dashboard-sealed.yaml"
    kubeseal_path: "{{ kubeseal_path }}"
    kubeconfig_path: "{{ kubeconfig_path }}"

  tasks:
    # Verificar que kubeseal esté instalado
    - name: 📋 Verificar que kubeseal esté instalado
      stat:
        path: "{{ kubeseal_path }}"
      register: kubeseal_check

    - name: ❌ Abortar si kubeseal no está instalado
      fail:
        msg: "❌ kubeseal no está instalado en {{ kubeseal_path }}. Por favor, instálalo."
      when: not kubeseal_check.stat.exists

    # Verificar que las variables de autenticación estén definidas
    - name: ⚙️ Verificar que las variables de autenticación estén definidas
      fail:
        msg: "LONGHORN_AUTH_USER y LONGHORN_AUTH_PASS deben estar definidos como variables de entorno."
      when: longhorn_auth_user is not defined or longhorn_auth_user == "" or longhorn_auth_pass is not defined or longhorn_auth_pass == ""

    # Generar la cadena de basic auth con htpasswd (bcrypt)
    - name: 🔑 Generar cadena básica con htpasswd (bcrypt)
      shell: echo "{{ longhorn_auth_pass }}" | htpasswd -i -B -n "{{ longhorn_auth_user }}"
      register: basic_auth_string
      changed_when: false
      no_log: true  # No mostrar la contraseña en los logs

    # Codificar "user:hash" en base64
    - name: 🔐 Codificar "user:hash" en base64
      set_fact:
        basic_auth: "{{ basic_auth_string.stdout | b64encode }}"

    # Renderizar plantilla del Secret sin sellar (unsealed)
    - name: 📝 Renderizar plantilla del Secret sin sellar (unsealed)
      template:
        src: "{{ secret_template }}"
        dest: "{{ rendered_unsealed_secret_path }}"
      vars:
        basic_auth: "{{ basic_auth }}"
        namespace_tpl: "{{ longhorn_namespace }}"  # Asegúrate de que longhorn_namespace está definido en vars/main.yml
        secret_name: "longhorn-dashboard-auth"  # Asignar un nombre específico al secret

    # Sellar el Secret de Longhorn Dashboard con kubeseal
    - name: 🔐 Sellar el Secret de Longhorn Dashboard con kubeseal
      shell: >
        {{ kubeseal_path }}
        --controller-name sealed-secrets-controller
        --controller-namespace kube-system
        --format yaml
        < {{ rendered_unsealed_secret_path }}
        > {{ sealed_secret_path }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: true

    # Eliminar el Secret sin sellar
    - name: 🗑️ Eliminar el Secret sin sellar
      file:
        path: "{{ rendered_unsealed_secret_path }}"
        state: absent
      changed_when: false

    # NUEVA TAREA: Aplicar el SealedSecret al clúster
    - name: 🚀 Aplicar SealedSecret para Longhorn Dashboard
      ansible.builtin.command:
        cmd: >
          {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }}
          apply -f {{ sealed_secret_path }}
      register: apply_sealed_secret_result # Registramos la salida
      changed_when: "'created' in apply_sealed_secret_result.stdout or 'configured' in apply_sealed_secret_result.stdout"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}" # Aseguramos que se usa el kubeconfig correcto
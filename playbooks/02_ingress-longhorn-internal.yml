# playbooks/02_ingress-longhorn-internal.yml
# 🚪 Exponer Longhorn Dashboard con IngressRoute Interno y Autenticación

- name: 🚪 Exponer Longhorn Dashboard con IngressRoute Interno y Autenticación
  hosts: localhost
  become: false
  gather_facts: false

  vars_files:
    - ../vars/main.yml

  vars:
    kubeconfig_path: "/home/victory/.kube/config"  # Ruta del kubeconfig
    kubectl_path: "/usr/local/bin/kubectl"  # Ruta de kubectl
    files_dir: "{{ playbook_dir }}/files"  # Directorio de archivos generados
    rendered_auth_middleware_path: "{{ files_dir }}/longhorn-dashboard-auth.yaml"  # Archivo de middleware de autenticación
    rendered_strip_middleware_path: "{{ files_dir }}/strip-prefix-dashboard.yaml"  # Archivo de middleware para stripPrefix
    rendered_ingressroute_path: "{{ files_dir }}/longhorn-dashboard-ingressroute.yaml"  # Archivo de IngressRoute
    rendered_tlsstore_path: "{{ files_dir }}/longhorn-tlsstore.yaml"  # Archivo del TLSStore

  tasks:
    # 📄 Renderizar Middleware de autenticación
    - name: 📄 Renderizar Middleware de autenticación
      template:
        src: ../templates/longhorn/longhorn-dashboard-auth-middleware.yaml.j2  # Plantilla Jinja2 para el middleware de autenticación
        dest: "{{ rendered_auth_middleware_path }}"  # Archivo de salida con el middleware de autenticación

    # 📄 Renderizar Middleware de stripPrefix
    - name: 📄 Renderizar Middleware de stripPrefix
      template:
        src: ../templates/longhorn/strip-prefix-dashboard-middleware.yaml.j2  # Plantilla Jinja2 para el middleware stripPrefix
        dest: "{{ rendered_strip_middleware_path }}"  # Archivo de salida con el middleware stripPrefix

    # 📄 Renderizar IngressRoute para el Dashboard
    - name: 📄 Renderizar IngressRoute para el Dashboard
      template:
        src: ../templates/longhorn/longhorn-dashboard-ingressroute-internal.yaml.j2  # Plantilla Jinja2 para IngressRoute
        dest: "{{ rendered_ingressroute_path }}"  # Archivo de salida con el IngressRoute

    # Mostrar las diferencias del Middleware (auth) en modo check
    - name: 🚀 Mostrar diff del Middleware (auth) (modo check)
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} diff -f "{{ rendered_auth_middleware_path }}"
      when: ansible_check_mode  # Solo en modo check

    # Aplicar Middleware de autenticación
    - name: 🚀 Aplicar Middleware (auth)
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply --validate=false -f "{{ rendered_auth_middleware_path }}"
      when: not ansible_check_mode  # Solo en modo ejecución real

    # Mostrar las diferencias del Middleware (stripPrefix) en modo check
    - name: 🚀 Mostrar diff del Middleware (stripPrefix) (modo check)
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} diff -f "{{ rendered_strip_middleware_path }}"
      when: ansible_check_mode  # Solo en modo check

    # Aplicar Middleware de stripPrefix
    - name: 🚀 Aplicar Middleware (stripPrefix)
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply --validate=false -f "{{ rendered_strip_middleware_path }}"
      when: not ansible_check_mode  # Solo en modo ejecución real

    # Mostrar las diferencias del IngressRoute en modo check
    - name: 🚀 Mostrar diff del IngressRoute (modo check)
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} diff -f "{{ rendered_ingressroute_path }}"
      when: ansible_check_mode  # Solo en modo check

    # Aplicar IngressRoute para Longhorn Dashboard
    - name: 🚀 Aplicar IngressRoute
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply --validate=false -f "{{ rendered_ingressroute_path }}"
      when: not ansible_check_mode  # Solo en modo ejecución real

    # 📄 Renderizar TLSStore para Longhorn
    - name: 📄 Renderizar TLSStore
      template:
        src: ../templates/longhorn/longhorn-tlsstore.yaml.j2  # Plantilla Jinja2 para el TLSStore
        dest: "{{ rendered_tlsstore_path }}"  # Archivo de salida con el TLSStore

    # 🚀 Aplicar TLSStore
    - name: 🚀 Aplicar TLSStore
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f "{{ rendered_tlsstore_path }}"
      when: not ansible_check_mode  # Solo en modo ejecución real